{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/calendar-drawer.ts","../../node_modules/svelte/store/index.mjs","../../src/store.ts","../../src/ImageMover.svelte","../../src/utils.ts","../../src/ImageResizer.svelte","../../src/Canvas.svelte","../../src/calendar-year-drawer.ts","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.58.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","// Chat GPT says this is based off this: https://en.wikipedia.org/wiki/Rec._709\r\nexport function isColorDark(color) {\r\n    const rgb = parseInt(color.replace(\"#\", \"\"), 16);\r\n    const r = (rgb >> 16) & 0xff;\r\n    const g = (rgb >> 8) & 0xff;\r\n    const b = (rgb >> 0) & 0xff;\r\n    const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n    return luma < 32;\r\n}\r\nexport function drawCalendar(options) {\r\n    const { month, year, boxSize, backgroundImage, canvas, backgroundRect, calendarRect, calendarColor = \"#ffffff\", } = options; // Clear canvas\r\n    const context = canvas.getContext('2d');\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    if (backgroundImage) {\r\n        context.drawImage(backgroundImage, backgroundRect.x, backgroundRect.y, backgroundRect.width, backgroundRect.height);\r\n    }\r\n    //const shadowColor = isColorDark(calendarColor) ? \"white\" : \"black\";\r\n    const shadowColor = 'black';\r\n    // Set text style\r\n    context.fillStyle = calendarColor;\r\n    context.strokeStyle = calendarColor;\r\n    context.textBaseline = 'middle';\r\n    context.textAlign = 'center';\r\n    context.shadowColor = shadowColor;\r\n    context.shadowOffsetX = 1;\r\n    context.shadowOffsetY = 0;\r\n    context.shadowBlur = 4;\r\n    // Calculate the starting day and number of days in the month\r\n    let startDay = new Date(year, month, 1).getDay() - 1; // Subtract 1 to start from Monday\r\n    startDay = startDay === -1 ? 6 : startDay; // If startDay is -1 (Sunday), set it to 6\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    let date = 1;\r\n    let x = 0;\r\n    let y = 0;\r\n    const numCols = 7;\r\n    const totalCalendarWidth = boxSize.width * numCols;\r\n    const startX = calendarRect.x;\r\n    let startY = calendarRect.y;\r\n    // Draw weekday names\r\n    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n    const monthNames = [\r\n        'January', 'February', 'March', 'April', 'May', 'June',\r\n        'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n    const monthYearText = `${monthNames[month]} - ${year}`;\r\n    context.font = 'bold 20px Arial';\r\n    const monthYearTextMeasure = context.measureText(monthYearText);\r\n    const monthYearTextX = startX + totalCalendarWidth / 2;\r\n    const monthYearHeight = monthYearTextMeasure.actualBoundingBoxAscent + monthYearTextMeasure.actualBoundingBoxDescent;\r\n    context.fillText(monthYearText, monthYearTextX, startY + monthYearHeight);\r\n    context.font = 'bold 16px Arial';\r\n    startY += monthYearHeight * 1.5;\r\n    const weekdaysHeight = monthYearHeight;\r\n    for (let col = 0; col < 7; col++) {\r\n        const x = startX + col * boxSize.width;\r\n        context.fillText(weekdays[col], x + boxSize.width / 2, startY + weekdaysHeight);\r\n    }\r\n    startY += weekdaysHeight * 2;\r\n    context.font = '16px Arial';\r\n    // Iterate through weeks (rows)\r\n    for (let week = 0; week < 6; week++) {\r\n        y = week * boxSize.height + startY;\r\n        // Iterate through days (columns)\r\n        for (let day = 0; day < 7; day++) {\r\n            x = startX + day * boxSize.width;\r\n            if (week === 0 && day < startDay || date > daysInMonth) {\r\n                // Skip empty cells before the start of the month or after the end of the month\r\n                continue;\r\n            }\r\n            // Draw the date box\r\n            context.strokeRect(x, y, boxSize.width, boxSize.height);\r\n            // Draw the date number\r\n            context.fillText(date.toString(), x + boxSize.width / 2, y + monthYearHeight);\r\n            date++;\r\n        }\r\n    }\r\n}\r\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n","import { writable } from 'svelte/store';\r\nexport const currentSelectedImageStore = writable(undefined);\r\nexport const boxSize = writable({\r\n    width: 100,\r\n    height: 100,\r\n});\r\nexport function updateBoxSize(newSize) {\r\n    boxSize.set(newSize);\r\n}\r\n","<script lang=\"ts\">\r\n  import { createEventDispatcher, onDestroy } from 'svelte';\r\n  import type { ImageRect } from \"./image-rect\";\r\n  import { currentSelectedImageStore } from './store';\r\n\r\n  interface ImageMovedEvent {\r\n    imageMoved: ImageRect;\r\n  }\r\n\r\n  const dispatch = createEventDispatcher<ImageMovedEvent>();\r\n\r\n  export let currentSelectedImage: ImageRect | undefined;\r\n  const unsubscribe = currentSelectedImageStore.subscribe((value) => {\r\n    currentSelectedImage = value;\r\n  });\r\n\r\n  let rafInProgress = false;\r\n  let startX = 0;\r\n  let startY = 0;\r\n  let isMoving = false;\r\n  let hasMoved = false;\r\n  let isOutsideWindow = false;\r\n  let resetButtonRef: HTMLElement | undefined;\r\n\r\n  $: {\r\n    isOutsideWindow = currentSelectedImage && (currentSelectedImage.x + currentSelectedImage.width > window.innerWidth);\r\n  }\r\n\r\n  onDestroy(() => {\r\n    unsubscribe();\r\n  });\r\n\r\n  function onPointerDown(event: PointerEvent) {\r\n    if (!currentSelectedImage) return;\r\n    startX = event.clientX;\r\n    startY = event.clientY;\r\n    isMoving = true;\r\n    hasMoved = false;\r\n  }\r\n\r\n  function onPointerMove(event: PointerEvent) {\r\n    if (!isMoving) return;\r\n    const dx = event.clientX - startX;\r\n    const dy = event.clientY - startY;\r\n    currentSelectedImage.x += dx;\r\n    currentSelectedImage.y += dy;\r\n    startX = event.clientX;\r\n    startY = event.clientY;\r\n\r\n    if (dx !== 0 || dy !== 0) {\r\n      hasMoved = true;\r\n    }\r\n\r\n    if (rafInProgress) return;\r\n\r\n    rafInProgress = true;\r\n    requestAnimationFrame(() => {\r\n      rafInProgress = false;\r\n      dispatch('imageMoved', currentSelectedImage);\r\n    });\r\n  }\r\n\r\n  function onPointerUp(event: PointerEvent  ) {\r\n    isMoving = false;\r\n\r\n    if (hasMoved) {\r\n      event.stopPropagation();\r\n    } else if (resetButtonRef.contains(event.target as Node)) {\r\n      event.stopPropagation();\r\n    }\r\n    hasMoved = false;\r\n  }\r\n\r\n  function resetImagePosition() {\r\n    currentSelectedImage.x = 0;\r\n    currentSelectedImage.y = 0;\r\n    dispatch('imageMoved', currentSelectedImage);\r\n  }\r\n\r\n</script>\r\n\r\n\r\n<style lang=\"scss\">\r\n  .bounding-box {\r\n    position: absolute;\r\n    z-index: 9999;\r\n    --border-size: 4;\r\n  }\r\n\r\n  rect.dashed-main {\r\n    stroke: black;\r\n    fill: none;\r\n    stroke-width: var(--border-size);\r\n  }\r\n\r\n  rect.dashed-alternate {\r\n    stroke: white;\r\n    fill: none;\r\n    stroke-dasharray: var(--border-size),var(--border-size);\r\n    stroke-width: var(--border-size);\r\n  }\r\n\r\n  .reset-button {\r\n    position: absolute;\r\n    cursor: pointer;\r\n  }\r\n  .right-aligned {\r\n    right: 0;\r\n  }\r\n  .left-aligned {\r\n    left: 0;\r\n  }\r\n\r\n  .reset-icon {\r\n    font-size: 24px;\r\n    color: white;\r\n    text-shadow: 1px 1px 2px black;\r\n    cursor: pointer;\r\n    transition: color 0.3s;\r\n  }\r\n\r\n  .reset-icon:hover {\r\n    color: silver;\r\n  }\r\n</style>\r\n\r\n{#if currentSelectedImage}\r\n  <div\r\n    class=\"bounding-box\"\r\n    style=\"left: {currentSelectedImage.x}px; top: {currentSelectedImage.y}px;\"\r\n    on:pointerdown=\"{onPointerDown}\"\r\n    on:pointerup=\"{onPointerUp}\"\r\n    on:pointermove=\"{onPointerMove}\"\r\n  >\r\n    <div\r\n      class=\"reset-button\"\r\n      bind:this={resetButtonRef}\r\n      class:left-aligned={isOutsideWindow}\r\n      class:right-aligned={!isOutsideWindow}\r\n      on:pointerup={resetImagePosition}\r\n    >\r\n      <span class=\"reset-icon\">&#215;</span>\r\n    </div>\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"{currentSelectedImage.width}\"\r\n      height=\"{currentSelectedImage.height}\"\r\n\r\n    >\r\n      <rect\r\n        class=\"dashed-main\"\r\n        x=\"0\"\r\n        y=\"0\"\r\n        width=\"{currentSelectedImage.width}\"\r\n        height=\"{currentSelectedImage.height}\"\r\n        stroke=\"white\"\r\n        stroke-width=\"2\"\r\n        fill=\"none\"\r\n      />\r\n      <rect\r\n        class=\"dashed-alternate\"\r\n        x=\"0\"\r\n        y=\"0\"\r\n        width=\"{currentSelectedImage.width}\"\r\n        height=\"{currentSelectedImage.height}\"\r\n        stroke=\"black\"\r\n        stroke-width=\"2\"\r\n        fill=\"none\"\r\n      />\r\n    </svg>\r\n  </div>\r\n{/if}\r\n","import { boxSize } from './store';\r\nexport function download(dataUrl, filename) {\r\n    const link = document.createElement('a');\r\n    link.download = filename;\r\n    link.href = dataUrl;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n}\r\nexport function calculateRows(selectedYear, selectedMonth, firstDayOfWeek = 1) {\r\n    const daysInMonth = new Date(selectedYear, selectedMonth + 1, 0).getDate();\r\n    const firstDayOfWeekIndex = new Date(selectedYear, selectedMonth, 1).getDay() - firstDayOfWeek;\r\n    const rows = Math.ceil((daysInMonth + firstDayOfWeekIndex) / 7);\r\n    return rows;\r\n}\r\nexport function calculateCalendarHeight(size, selectedYear, selectedMonth, firstDayOfWeek = 1) {\r\n    const rows = calculateRows(selectedYear, selectedMonth, 1);\r\n    return size * (rows + 1);\r\n}\r\n","<script lang=\"ts\">\r\n  import { updateBoxSize, boxSize } from './store';\r\n  import type { ImageRect } from './image-rect';\r\n  import type { BoxSize } from './box-size';\r\n  import { calculateCalendarHeight, calculateRows } from './utils';\r\n\r\n  export let imageRect: ImageRect;\r\n  export let selectedYear: number;\r\n  export let selectedMonth: number;\r\n\r\n  let resizing = false;\r\n  let startX: number;\r\n  let startY: number;\r\n  let initialBoxSize: BoxSize;\r\n\r\n  function handlePointerDown(event: PointerEvent) {\r\n    resizing = true;\r\n    startX = event.clientX;\r\n    startY = event.clientY;\r\n    initialBoxSize = { width: $boxSize.width, height: $boxSize.height };\r\n\r\n    window.addEventListener('pointermove', handlePointerMove);\r\n    window.addEventListener('pointerup', handlePointerUp);\r\n    window.addEventListener('pointercancel', handlePointerUp);\r\n  }\r\n\r\n  function handlePointerMove(event: PointerEvent) {\r\n    if (!resizing) return;\r\n\r\n    const deltaX = event.clientX - startX;\r\n    const deltaY = event.clientY - startY;\r\n    const newWidth = initialBoxSize.width * 7 + deltaX;\r\n    const newBoxSizeWidth = newWidth / 7;\r\n\r\n    const calendarHeight = calculateCalendarHeight(initialBoxSize.height, selectedYear, selectedMonth, 1) + deltaY;\r\n    const rows = calculateRows(selectedYear, selectedMonth, 1);\r\n    const newBoxSizeHeight = calendarHeight / (rows + 1);\r\n\r\n    updateBoxSize({\r\n      width: newBoxSizeWidth,\r\n      height: newBoxSizeHeight,\r\n    });\r\n  }\r\n\r\n  function handlePointerUp(event: PointerEvent) {\r\n    resizing = false;\r\n    window.removeEventListener('pointermove', handlePointerMove);\r\n    window.removeEventListener('pointerup', handlePointerUp);\r\n    window.removeEventListener('pointercancel', handlePointerUp);\r\n  }\r\n</script>\r\n\r\n<div\r\n  class=\"resizer\"\r\n  on:pointerdown|stopPropagation=\"{handlePointerDown}\"\r\n  style=\"left: {imageRect.x + imageRect.width}px; top: {imageRect.y + imageRect.height}px;\"\r\n/>\r\n\r\n<style>\r\n  .resizer {\r\n    position: absolute;\r\n    width: 10px;\r\n    height: 10px;\r\n    /*background-color: #000;*/\r\n    cursor: nwse-resize;\r\n    z-index: 10;\r\n    background-color: red;\r\n  }\r\n</style>\r\n\r\n","<script lang=\"ts\">\r\n  import { onMount } from 'svelte';\r\n  import type {ChangeEvent} from \"rollup\";\r\n  import { drawCalendar, isColorDark } from './calendar-drawer';\r\n  import { drawYearCalendar } from './calendar-year-drawer';\r\n  import type { ImageRect } from './image-rect';\r\n  import ImageMover from './ImageMover.svelte';\r\n  import { boxSize, currentSelectedImageStore } from './store';\r\n  import ImageResizer from './ImageResizer.svelte';\r\n  import { calculateCalendarHeight, calculateRows } from './utils';\r\n\r\n  type SelectedResolution = `${number}x${number}` | 'auto';\r\n\r\n  let backgroundImage: HTMLImageElement;\r\n  let canvas: HTMLCanvasElement;\r\n  let canvasWidth = 0;\r\n  let canvasHeight = 0;\r\n  let selectedResolution: SelectedResolution | '' = 'auto';\r\n  let selectedMonth = new Date().getMonth();\r\n  let selectedYear = new Date().getFullYear();\r\n  let calendarColor = \"#FFFFFF\";\r\n  let borderColor = '';\r\n\r\n  let currentSelectedImage: ImageRect | undefined = undefined;\r\n  let backgroundRect: ImageRect = { x: 0, y: 0, width: 0, height: 0, type: 'background' };\r\n  let calendarRect: ImageRect = { x: 25, y: 0, width: 0, height: 0, type: 'calendar' };\r\n  const initialCalendarRect = { ...calendarRect };\r\n\r\n  let drawRequested = false;\r\n\r\n  $: {\r\n    if (canvas && canvasWidth !== 0 && canvasHeight !== 0) {\r\n      requestDrawCalendar();\r\n    }\r\n  }\r\n\r\n  $: {\r\n    if (canvas) {\r\n      canvas.width = canvasWidth;\r\n      canvas.height = canvasHeight;\r\n      backgroundRect.height = canvasHeight;\r\n      backgroundRect.width = canvasWidth;\r\n    }\r\n  }\r\n\r\n  $: {\r\n    borderColor = isColorDark(calendarColor) ? 'transparent' : 'black';\r\n  }\r\n\r\n  $: {\r\n    if (backgroundRect || calendarRect) {\r\n      currentSelectedImageStore.set(currentSelectedImage);\r\n    }\r\n  }\r\n\r\n  $: {\r\n    if (currentSelectedImage) {\r\n      currentSelectedImageStore.set(currentSelectedImage);\r\n    }\r\n  }\r\n\r\n  onMount(() => {\r\n    // const initialResolution = findNearestResolution(window.innerWidth, window.innerHeight);\r\n    // canvasWidth = initialResolution.width;\r\n    // canvasHeight = initialResolution.height;\r\n    // selectedResolution = `${canvasWidth}x${canvasHeight}` as SelectedResolution;\r\n    // ctx = canvas.getContext('2d');\r\n    updateCalendarRect();\r\n    requestDrawCalendar();\r\n\r\n    const subscriptions = [\r\n      boxSize.subscribe(() => updateBoxSize()),\r\n    ];\r\n\r\n    window.addEventListener('pointerup', trySelectImage);\r\n    return () => {\r\n      subscriptions.forEach(subscription => subscription());\r\n      window.removeEventListener('pointerup', trySelectImage);\r\n    };\r\n  });\r\n\r\n  function requestDrawCalendar() {\r\n    if (!drawRequested) {\r\n      drawRequested = true;\r\n      requestAnimationFrame(() => {\r\n        drawCalendar({\r\n          month: selectedMonth,\r\n          year: selectedYear,\r\n          boxSize: $boxSize,\r\n          backgroundImage,\r\n          canvas,\r\n          calendarRect,\r\n          backgroundRect,\r\n          firstDayOfWeek: 1,\r\n          locale: 'en-GB',\r\n          calendarColor,\r\n        });\r\n        drawRequested = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  function handleFileUpload(e: ChangeEvent) {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      backgroundImage = new Image();\r\n      backgroundImage.src = event.target.result as string;\r\n      backgroundImage.onload = () => onBackgroundImageLoad();\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  // When the background image is loaded, update backgroundRect\r\n  function onBackgroundImageLoad() {\r\n    updateCanvasSize();\r\n    backgroundRect.height = canvasHeight;\r\n    backgroundRect.width = canvasWidth;\r\n  }\r\n\r\n  function exportCalendar() {\r\n    const dataUrl = canvas.toDataURL('image/png');\r\n    const link = document.createElement('a');\r\n    link.href = dataUrl;\r\n\r\n    // Get the current year and month\r\n    const monthNames = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n\r\n    // Generate the filename\r\n    const filename = `${selectedYear}_${monthNames[selectedMonth]}.png`;\r\n    link.download = filename;\r\n    link.click();\r\n  }\r\n\r\n  function exportYear() {\r\n    const result = drawYearCalendar({\r\n      year: selectedYear,\r\n      boxSize: $boxSize,\r\n      backgroundImage,\r\n      backgroundRect,\r\n      calendarRect,\r\n      calendarColor,\r\n      firstDayOfWeek: 1,\r\n      cellHeight: canvasHeight,\r\n      cellSpacing: 5,\r\n      cellWidth: canvasWidth,\r\n    });\r\n\r\n    const dataUrl = result.toDataURL('image/png');\r\n    const link = document.createElement('a');\r\n    link.href = dataUrl;\r\n    link.download = `calendar-${selectedYear}.png`;\r\n    link.click();\r\n  }\r\n\r\n  function onMonthYearChange() {\r\n    requestDrawCalendar();\r\n  }\r\n\r\n  function updateCanvasSize() {\r\n    if (selectedResolution === \"auto\") {\r\n      if (backgroundImage) {\r\n        canvasWidth = backgroundImage.naturalWidth;\r\n        canvasHeight = backgroundImage.naturalHeight;\r\n      }\r\n    } else {\r\n      const [width, height] = selectedResolution.split(\"x\").map(Number);\r\n      canvasWidth = width;\r\n      canvasHeight = height;\r\n    }\r\n  }\r\n\r\n  function updateCalendarRect() {\r\n    calendarRect.width = $boxSize.width * 7;\r\n\r\n    // const firstDayOfWeek = 1;\r\n    // const daysInMonth = new Date(selectedYear, selectedMonth + 1, 0).getDate();\r\n    // const firstDayOfWeekIndex = new Date(selectedYear, selectedMonth, 1).getDay() - firstDayOfWeek;\r\n    // const rows = Math.ceil((daysInMonth + firstDayOfWeekIndex) / 7);\r\n    calendarRect.height = calculateCalendarHeight($boxSize.height, selectedYear, selectedMonth, 1);\r\n  }\r\n\r\n  function updateBoxSize() {\r\n    updateCalendarRect();\r\n    requestDrawCalendar();\r\n  }\r\n\r\n  function trySelectImage(event: MouseEvent) {\r\n    const canvasRect = canvas.getBoundingClientRect();\r\n    const x = event.pageX - canvasRect.left - window.scrollX;\r\n    const y = event.pageY - canvasRect.top - window.scrollY;\r\n\r\n    if (\r\n      x < 0 || x > canvasRect.width\r\n      || y < 0 || y > canvasRect.height\r\n    ) {\r\n      currentSelectedImage = undefined;\r\n      return;\r\n    }\r\n\r\n    if (\r\n      x >= calendarRect.x &&\r\n      x <= calendarRect.x + calendarRect.width &&\r\n      y >= calendarRect.y &&\r\n      y <= calendarRect.y + calendarRect.height\r\n    ) {\r\n      currentSelectedImage = calendarRect;\r\n      return;\r\n    }\r\n\r\n    if (\r\n      x >= backgroundRect.x &&\r\n      x <= backgroundRect.x + backgroundRect.width &&\r\n      y >= backgroundRect.y &&\r\n      y <= backgroundRect.y + backgroundRect.height\r\n    ) {\r\n      currentSelectedImage = backgroundRect;\r\n      return;\r\n    }\r\n\r\n    currentSelectedImage = undefined;\r\n  }\r\n\r\n  function resetRects() {\r\n    calendarRect.x = initialCalendarRect.x;\r\n    calendarRect.y = initialCalendarRect.y;\r\n\r\n    backgroundRect.x = 0;\r\n    backgroundRect.y = 0;\r\n\r\n    requestDrawCalendar();\r\n  }\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n  .settings {\r\n    display: flex;\r\n    gap: 4px;\r\n    align-items: center;\r\n  }\r\n\r\n  .canvas-container {\r\n    position: relative;\r\n    box-sizing: border-box;\r\n    border: 1px solid black;\r\n    display: inline-flex;\r\n  }\r\n\r\n  canvas {\r\n    z-index: 1;\r\n  }\r\n\r\n  .color-picker-container {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .calendar-color-picker {\r\n    display: none;\r\n  }\r\n\r\n  .color-display {\r\n    width: 24px;\r\n    height: 24px;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    margin-left: 4px;\r\n  }\r\n</style>\r\n\r\n\r\n\r\n<div class=\"settings\">\r\n  <input type=\"file\" accept=\"image/*\" on:input={handleFileUpload} />\r\n\r\n  <select bind:value={selectedMonth} on:change={onMonthYearChange}>\r\n    <option value={0}>January</option>\r\n    <option value={1}>February</option>\r\n    <option value={2}>March</option>\r\n    <option value={3}>April</option>\r\n    <option value={4}>May</option>\r\n    <option value={5}>June</option>\r\n    <option value={6}>July</option>\r\n    <option value={7}>August</option>\r\n    <option value={8}>September</option>\r\n    <option value={9}>October</option>\r\n    <option value={10}>November</option>\r\n    <option value={11}>December</option>\r\n  </select>\r\n  <select bind:value={selectedYear} on:change={onMonthYearChange}>\r\n    {#each Array.from({length: 11}, (_, i) => new Date().getFullYear() - 5 + i) as year}\r\n      <option value={year}>{year}</option>\r\n    {/each}\r\n  </select>\r\n  <button on:click={exportCalendar}>Export Calendar</button>\r\n  <button on:click={exportYear}>Export Year</button>\r\n</div>\r\n<div class=\"settings\">\r\n  <label for=\"boxSizeWidth\">Calendar Width: </label>\r\n  <input id=\"boxSizeWidth\" type=\"number\" min=\"50\" bind:value={$boxSize.width} />\r\n  <label for=\"boxSizeHeight\">Calendar Height: </label>\r\n  <input id=\"boxSizeHeight\" type=\"number\" min=\"50\" bind:value={$boxSize.height} />\r\n\r\n  <label for=\"calendar-color-picker\" class=\"color-picker-container\">\r\n    Color:\r\n    <input\r\n      type=\"color\"\r\n      bind:value=\"{calendarColor}\"\r\n      on:input=\"{() => requestDrawCalendar()}\"\r\n      class=\"calendar-color-picker\"\r\n      id=\"calendar-color-picker\"\r\n    />\r\n\r\n    <div\r\n      class=\"color-display\"\r\n      style=\"background-color: {calendarColor}; border-color: {borderColor};\"\r\n    />\r\n  </label>\r\n\r\n  <label for=\"canvasWidth\">Canvas Width: </label>\r\n  <input id=\"canvasWidth\" type=\"number\" min=\"300\" bind:value={canvasWidth} on:input={() => requestDrawCalendar()} />\r\n\r\n  <label for=\"canvasHeight\">Canvas Height: </label>\r\n  <input id=\"canvasHeight\" type=\"number\" min=\"300\" bind:value={canvasHeight} on:input={() => requestDrawCalendar()} />\r\n\r\n  <select bind:value={selectedResolution} on:change={() => updateCanvasSize()}>\r\n    <option value=\"auto\">Fit to background image</option>\r\n    <option value=\"800x600\">800x600</option>\r\n    <option value=\"1024x768\">1024x768</option>\r\n    <option value=\"1280x720\">1280x720 (720p)</option>\r\n    <option value=\"1920x1080\">1920x1080 (1080p)</option>\r\n    <option value=\"2560x1440\">2560x1440 (1440p)</option>\r\n    <option value=\"3840x2160\">3840x2160 (4K)</option>\r\n    <option value=\"5120x2880\">5120x2880 (5K)</option>\r\n    <option value=\"7680x4320\">7680x4320 (8K)</option>\r\n  </select>\r\n\r\n  <button on:click={resetRects}>Reset Rects</button>\r\n</div>\r\n\r\n<div class=\"canvas-container\">\r\n  <ImageMover bind:currentSelectedImage=\"{currentSelectedImage}\" on:imageMoved=\"{() => { requestDrawCalendar()}}\" />\r\n  {#if currentSelectedImage?.type === 'calendar'}\r\n    <ImageResizer bind:imageRect={currentSelectedImage} bind:selectedYear={selectedYear} bind:selectedMonth={selectedMonth} />\r\n  {/if}\r\n  <canvas bind:this={canvas} width={canvasWidth} height={canvasHeight}></canvas>\r\n</div>\r\n\r\n\r\n","import { drawCalendar } from './calendar-drawer';\r\nexport function drawYearCalendar(options) {\r\n    const { year, boxSize, backgroundImage, calendarColor, firstDayOfWeek, backgroundRect, calendarRect, cellWidth, cellHeight, cellSpacing, } = options;\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = cellWidth * 3 + cellSpacing * 2;\r\n    canvas.height = cellHeight * 4 + cellSpacing * 3;\r\n    const context = canvas.getContext('2d');\r\n    const monthCanvas = document.createElement('canvas');\r\n    monthCanvas.width = cellWidth;\r\n    monthCanvas.height = cellHeight;\r\n    for (let quarter = 0; quarter < 4; quarter++) {\r\n        for (let monthInQuarter = 0; monthInQuarter < 3; monthInQuarter++) {\r\n            const month = quarter * 3 + monthInQuarter;\r\n            drawCalendar({\r\n                month,\r\n                year,\r\n                boxSize,\r\n                backgroundImage,\r\n                canvas: monthCanvas,\r\n                backgroundRect,\r\n                calendarRect,\r\n                calendarColor,\r\n                firstDayOfWeek,\r\n            });\r\n            const x = monthInQuarter * (cellWidth + cellSpacing);\r\n            const y = quarter * (cellHeight + cellSpacing);\r\n            context.drawImage(monthCanvas, x, y, cellWidth, cellHeight);\r\n        }\r\n    }\r\n    return canvas;\r\n}\r\n","<script lang=\"ts\">\n  import Canvas from './Canvas.svelte';\n</script>\n\n<main>\n  <Canvas />\n</main>","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body,\r\n    props: {\r\n        name: 'world'\r\n    }\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","to_number","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","select_option","select","mounting","i","length","option","__value","selected","undefined","selectedIndex","select_value","selected_option","querySelector","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","createEventDispatcher","type","detail","cancelable","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","defaultPrevented","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","bind","index","props","bound","create_component","mount_component","customElement","m","new_on_destroy","on_mount","map","filter","destroy_component","detaching","filtered","targets","indexOf","flush_render_callbacks","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","splice","$set","$$props","obj","$$set","keys","drawCalendar","month","year","boxSize","backgroundImage","canvas","backgroundRect","calendarRect","calendarColor","getContext","clearRect","width","height","drawImage","x","y","fillStyle","strokeStyle","textBaseline","textAlign","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","startDay","Date","getDay","daysInMonth","getDate","date","totalCalendarWidth","startX","startY","weekdays","monthYearText","font","monthYearTextMeasure","measureText","monthYearTextX","monthYearHeight","actualBoundingBoxAscent","actualBoundingBoxDescent","fillText","weekdaysHeight","col","week","day","strokeRect","toString","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","currentSelectedImageStore","rect0","rect0_width_value","rect0_height_value","rect1","rect1_width_value","rect1_height_value","svg","svg_width_value","svg_height_value","div1","div0","create_if_block","dispatch","currentSelectedImage","$$invalidate","resetButtonRef","rafInProgress","isMoving","hasMoved","isOutsideWindow","window","innerWidth","clientX","clientY","dx","dy","requestAnimationFrame","contains","stopPropagation","$$value","calculateRows","selectedYear","selectedMonth","firstDayOfWeek","firstDayOfWeekIndex","Math","ceil","calculateCalendarHeight","div","initialBoxSize","imageRect","resizing","handlePointerMove","deltaX","deltaY","newBoxSizeWidth","calendarHeight","rows","newSize","handlePointerUp","$boxSize","each_value","select0","select1","select2","input0","option0","option1","option2","option3","option4","option5","option6","option7","option8","option9","option10","option11","button0","button1","div2","label0","input1","label1","input2","label2","input3","label3","input4","label4","input5","option12","option13","option14","option15","option16","option17","option18","option19","option20","button2","div3","canvas_1","r","iterations","canvasWidth","canvasHeight","selectedResolution","getMonth","getFullYear","borderColor","initialCalendarRect","assign","drawRequested","requestDrawCalendar","locale","updateCanvasSize","naturalWidth","naturalHeight","split","Number","updateCalendarRect","trySelectImage","canvasRect","getBoundingClientRect","pageX","left","scrollX","pageY","top","scrollY","subscriptions","subscription","color","rgb","parseInt","replace","isColorDark","file","files","reader","FileReader","onload","Image","src","result","readAsDataURL","dataUrl","toDataURL","link","href","filename","download","click","cellWidth","cellHeight","cellSpacing","monthCanvas","quarter","monthInQuarter","drawYearCalendar","_","main","body"],"mappings":"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","x_google_ignoreList":[0,2]}